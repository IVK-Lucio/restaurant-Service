import ballerina/grpc;
import ballerina/io;

public type KentBlockingClient client object {
    private grpc:Client grpcClient;

    function __init(string url, grpc:ClientEndpointConfig? config = ()) {
        // initialize client endpoint.
        grpc:Client c = new(url, config = config);
        error? result = c.initStub("blocking", ROOT_DESCRIPTOR, getDescriptorMap());
        if (result is error) {
            panic result;
        } else {
            self.grpcClient = c;
        }
    }


    remote function book(Client req, grpc:Headers? headers = ()) returns ((string, grpc:Headers)|error) {
        
        var payload = check self.grpcClient->blockingExecute("grpc_service.Kent/book", req, headers = headers);
        grpc:Headers resHeaders = new;
        any result = ();
        (result, resHeaders) = payload;
        return (string.convert(result), resHeaders);
    }

    remote function deposit(Deposit req, grpc:Headers? headers = ()) returns ((string, grpc:Headers)|error) {
        
        var payload = check self.grpcClient->blockingExecute("grpc_service.Kent/deposit", req, headers = headers);
        grpc:Headers resHeaders = new;
        any result = ();
        (result, resHeaders) = payload;
        return (string.convert(result), resHeaders);
    }

};

public type KentClient client object {
    private grpc:Client grpcClient;

    function __init(string url, grpc:ClientEndpointConfig? config = ()) {
        // initialize client endpoint.
        grpc:Client c = new(url, config = config);
        error? result = c.initStub("non-blocking", ROOT_DESCRIPTOR, getDescriptorMap());
        if (result is error) {
            panic result;
        } else {
            self.grpcClient = c;
        }
    }


    remote function book(Client req, service msgListener, grpc:Headers? headers = ()) returns (error?) {
        
        return self.grpcClient->nonBlockingExecute("grpc_service.Kent/book", req, msgListener, headers = headers);
    }

    remote function deposit(Deposit req, service msgListener, grpc:Headers? headers = ()) returns (error?) {
        
        return self.grpcClient->nonBlockingExecute("grpc_service.Kent/deposit", req, msgListener, headers = headers);
    }

};

type Booking record {|
    Date dateOfBooking;
    Time prefTime;
    int numberOfGuests;
    float hoursDuration = 2;
    Deposit deposit;
    
|};


type Deposit record {|
    float deposit;
    string reference;
    string confirmation;
    
|};


type Client record {|
    Booking booking;
    string reference;
    
|};


type Date record {|
    int int_day;
    int int_month;
    int int_year;
    
|};


type Time record {|
    int int_hour;
    int int_minute;
    
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "kent.proto
        "google/protobuf/wrappers.proto
        
    };
}

